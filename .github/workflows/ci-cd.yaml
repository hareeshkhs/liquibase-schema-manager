name: CI/CD - Dockerize and Push

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

jobs:
  lint:
    name: 🧹 Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          pip install black flake8

      - name: Run Black Check (style)
        run: |
          black --check --line-length 120 . --exclude '/(\.venv|\.git|__pycache__)/'

      - name: Run Flake8 Check (lint rules)
        run: |
          flake8 . --exclude=venv,__pycache__,.git --max-line-length=120 --ignore=F401,E501

    # Optional: Only run on pull requests or feature branches
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/feature/')

  # test:
  #   name: ✅ Run Unit Tests
  #   if: startsWith(github.head_ref, 'feature/')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.10"

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest

  #     - name: Run Tests
  #       run: pytest

  docker:
    name: 🐳 Build & Push to GHCR
    if: startsWith(github.head_ref, 'feature/')
    runs-on: ubuntu-latest
    needs: [lint]

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Determine version bump type from commit message
        id: bump_type
        run: |
          COMMIT_MSG=$(git log --no-merges -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"bump_minor"* ]]; then
            echo "INCREMENT_KEY=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"bump_major"* ]]; then
            echo "INCREMENT_KEY=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"bump_prerelease"* ]]; then
            echo "INCREMENT_KEY=prerelease" >> $GITHUB_OUTPUT
          else
            echo "INCREMENT_KEY=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        run: |
          echo "Bumping version using: ${{ steps.bump_type.outputs.INCREMENT_KEY }}"
          python bump_version.py ${{ steps.bump_type.outputs.INCREMENT_KEY }}

      - name: Commit and push updated version.py
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add version.py
          git commit -m "chore: bump version [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Extract version from Python
        id: get_version
        run: |
          VERSION=$(python -c "import version; print(version.__version__)")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract version from Python
      #   id: get_version
      #   run: |
      #     VERSION=$(python -c "import version; print(version.__version__)")
      #     echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }} .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}

      - name: Output Success
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "✅ Image successfully pushed with tag: $VERSION"
